# -*- coding: utf-8 -*-
"""Lab10_Graph

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YxWULfZ9kfegTScC_8CoE2r4uz232evz
"""

import time
import random
import string
import matplotlib.pyplot as plt

# Naive String Matching Algorithm
def naive_string_matching(text, pattern):
    n = len(text)
    m = len(pattern)
    for i in range(n - m + 1):
        j = 0
        while j < m and text[i + j] == pattern[j]:
            j += 1
        if j == m:
            return i
    return -1

# Rabin-Karp Algorithm
def rabin_karp(text, pattern, d=256, q=101):
    n = len(text)
    m = len(pattern)
    p = 0
    t = 0
    h = 1

    for i in range(m - 1):
        h = (h * d) % q

    for i in range(m):
        p = (d * p + ord(pattern[i])) % q
        t = (d * t + ord(text[i])) % q

    for i in range(n - m + 1):
        if p == t:
            if text[i:i+m] == pattern:
                return i

        if i < n - m:
            t = (d * (t - ord(text[i]) * h) + ord(text[i + m])) % q
            if t < 0:
                t = t + q
    return -1

# Knuth-Morris-Pratt (KMP) Algorithm
def compute_lps_array(pattern):
    m = len(pattern)
    lps = [0] * m
    length = 0
    i = 1
    while i < m:
        if pattern[i] == pattern[length]:
            length += 1
            lps[i] = length
            i += 1
        else:
            if length != 0:
                length = lps[length - 1]
            else:
                lps[i] = 0
                i += 1
    return lps

def kmp(text, pattern):
    n = len(text)
    m = len(pattern)
    lps = compute_lps_array(pattern)
    i = 0
    j = 0
    while i < n:
        if pattern[j] == text[i]:
            i += 1
            j += 1
        if j == m:
            return i - j
        elif i < n and pattern[j] != text[i]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1
    return -1

# Function to generate random string of a given length
def generate_random_string(length):
    return ''.join(random.choices(string.ascii_uppercase, k=length))

# Function to compare performance
def compare_algorithms():
    text_lengths = [100, 500, 1000, 5000, 10000]  # Different text sizes
    pattern_length = 5
    naive_times = []
    rabin_karp_times = []
    kmp_times = []

    for n in text_lengths:
        text = generate_random_string(n)
        pattern = generate_random_string(pattern_length)

        # Naive String Matching
        start_time = time.time()
        naive_string_matching(text, pattern)
        naive_times.append(time.time() - start_time)

        # Rabin-Karp Algorithm
        start_time = time.time()
        rabin_karp(text, pattern)
        rabin_karp_times.append(time.time() - start_time)

        # Knuth-Morris-Pratt Algorithm
        start_time = time.time()
        kmp(text, pattern)
        kmp_times.append(time.time() - start_time)

    # Plotting results
    plt.plot(text_lengths, naive_times, label='Naive')
    plt.plot(text_lengths, rabin_karp_times, label='Rabin-Karp')
    plt.plot(text_lengths, kmp_times, label='KMP')

    plt.xlabel('Text Length')
    plt.ylabel('Execution Time (seconds)')
    plt.title('Performance Comparison of String Matching Algorithms')
    plt.legend()
    plt.show()

# Run the comparison
compare_algorithms()